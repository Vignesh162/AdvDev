If you prefer to create and deploy an AWS Lambda function with an S3 bucket without using the command line, you can do it all through the **AWS Management Console**. Below is a step-by-step guide on how to accomplish this:

---

### Step 1: Write and Package Your Java Code

1. **Write the Java Code**:
   - In your IDE (like IntelliJ or Eclipse), create a simple Java project.
   - Create a class with your Lambda handler, e.g., `HelloWorldHandler.java`:

     ```java
     package com.example;

     import com.amazonaws.services.lambda.runtime.Context;
     import com.amazonaws.services.lambda.runtime.RequestHandler;

     public class HelloWorldHandler implements RequestHandler<String, String> {
         @Override
         public String handleRequest(String input, Context context) {
             return "Hello, " + input + "!";
         }
     }
     ```

2. **Package the Code into a JAR File**:
   - In your IDE, build the project to create a deployable JAR file.
   - The resulting `.jar` file (for example, `HelloWorldFunction.jar`) will be used to deploy to AWS Lambda.

---

### Step 2: Upload the JAR File to an S3 Bucket

1. **Log into AWS Console**.
2. **Navigate to S3**:
   - Go to the [S3 Console](https://s3.console.aws.amazon.com/s3/).
3. **Create a New S3 Bucket** (if you don’t already have one):
   - Click on **Create bucket**.
   - Enter a unique name for the bucket (e.g., `my-lambda-deploy-bucket`) and choose a region.
   - Click **Create bucket**.
4. **Upload the JAR File**:
   - Open your bucket by clicking on its name.
   - Click on **Upload**.
   - Drag and drop your JAR file (e.g., `HelloWorldFunction.jar`) or browse to select it, then click **Upload** to confirm.

---

### Step 3: Create an IAM Role for Lambda

1. **Navigate to IAM**:
   - Go to the [IAM Console](https://console.aws.amazon.com/iam/).
2. **Create a New Role**:
   - Click on **Roles** in the sidebar.
   - Click **Create role**.
   - Select **AWS Service** and then **Lambda** as the use case.
   - Click **Next**.
3. **Attach Permissions**:
   - Search for and select the policy **AWSLambdaBasicExecutionRole**. This provides basic permissions for Lambda to write logs to CloudWatch.
   - Click **Next**.
4. **Name the Role**:
   - Give your role a name, like `LambdaBasicExecutionRole`.
   - Click **Create role**.

---

### Step 4: Create the Lambda Function Using the S3 Bucket

1. **Navigate to Lambda**:
   - Go to the [AWS Lambda Console](https://console.aws.amazon.com/lambda/).
2. **Create a New Lambda Function**:
   - Click **Create function**.
   - Choose **Author from scratch**.
   - Enter a **Function name** (e.g., `HelloWorldFunction`).
   - Set the **Runtime** to `Java 11` (or another compatible version).
   - In the **Permissions** section, select **Use an existing role** and choose the IAM role you created earlier (`LambdaBasicExecutionRole`).
   - Click **Create function**.

3. **Configure the Function Code**:
   - Scroll to the **Code** section and select **Upload a file from Amazon S3**.
   - Enter the **S3 bucket name** and **Object key** (the path to your JAR file, like `HelloWorldFunction.jar`).
   - Click **Save** to upload and link the JAR file to your Lambda function.

4. **Set the Handler**:
   - In the **Handler** field, set the handler to match your Java class’s full name, for example: `com.example.HelloWorldHandler::handleRequest`.

---

### Step 5: Test the Lambda Function

1. **Create a Test Event**:
   - In the Lambda function console, click on **Test**.
   - Choose **Create a new test event**.
   - Enter a name for the test event, like `HelloWorldTest`.
   - Use the following sample JSON as input:
     ```json
     {
       "input": "World"
     }
     ```
   - Click **Create**.
2. **Run the Test**:
   - Click **Test** to execute the Lambda function with the provided test event.
   - The function should respond with `"Hello, World!"`, confirming successful execution.

---

### Summary

Using the AWS Management Console:

1. **Create** and **Upload** the Java Lambda code as a JAR file in S3.
2. **Create an IAM Role** for Lambda with basic execution permissions.
3. **Create the Lambda Function** in the console, pointing to the JAR file in the S3 bucket.
4. **Test** the function using the Lambda Console to verify it works.

This approach is suitable for users who prefer a GUI-based method without the command line. If you need further assistance, feel free to ask!
